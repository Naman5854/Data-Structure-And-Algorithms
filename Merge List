public class LinkedList {
    private Node head;
    private Node tail;
    private int size;

    public LinkedList() {
        this.size = 0;
    }
    public void insertFirst(int val){
        Node node=new Node(val);
        node.next=head;
        head=node;
        if(tail==null){
            tail=head;
        }
        size+=1;
    }
    public void insertLast(int val){
        if(tail==null){
            insertFirst(val);
            return;
        }
        Node node=new Node(val);
        tail.next=node;
        node.next=null;
        tail=node;
        size++;
    }
 public void display(){
        Node temp=head;
        while(temp!=null){
            System.out.print(temp.value +" -> ");
            temp=temp.next;
        }
        System.out.println("End");
    }
 // merge two sorted list
    public  static LinkedList merge(Node head1,Node head2){
          LinkedList list=new LinkedList();
        while(head1!=null && head2!=null){
            if(head1.value<=head2.value){
                list.insertLast(head1.value);
                head1=head1.next;
            }
            else{
                list.insertLast(head2.value);
                head2=head2.next;
            }
        }
     while(head1!=null){
         list.insertLast(head1.value);
         head1=head1.next;
     }
        while(head2!=null){
            list.insertLast(head2.value);
            head2=head2.next;
        }
        return list;
    }

    private class Node{
        private int value;
        private Node next;

        public Node(int value) {
            this.value = value;
        }

        public Node(int value, Node next) {
            this.value = value;
            this.next = next;
        }
    }
public static void main(String[] args) {
 LinkedList list1=new LinkedList();
        LinkedList list2=new LinkedList();
        list1.insertLast(1);
        list1.insertLast(3);
        list1.insertLast(5);
        list2.insertLast(1);
        list2.insertLast(2);
        list2.insertLast(9);
        list2.insertLast(14);
        list1.display();
        list2.display();
        LinkedList merged_list=merge(list1.head,list2.head);
        merged_list.display();
    }
}
/* Output:-
1 -> 3 -> 5 -> End
1 -> 2 -> 9 -> 14 -> End
1 -> 1 -> 2 -> 3 -> 5 -> 9 -> 14 -> End

### Conclusion: Merging Two Sorted Linked Lists
This implementation successfully merges two sorted linked lists into a new sorted linked list while maintaining the order. The merging process iterates through both lists, selecting the smaller element at each step, ensuring an efficient and correctly ordered result.  
Key Highlights:
- Preserves sorting during merging.
- Handles cases where one list is longer than the other.
- Does not modify the original lists, ensuring data integrity.
- Uses an iterative approach for efficiency.
This approach provides a simple yet effective way to merge sorted linked lists with a time complexity of **O(n + m)**, where *n* and *m* are the lengths of the two lists.
*/
